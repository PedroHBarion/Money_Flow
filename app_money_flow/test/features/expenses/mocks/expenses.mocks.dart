// Mocks generated by Mockito 5.4.6 from annotations
// in app_money_flow/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i9;
import 'dart:typed_data' as _i11;

import 'package:app_money_flow/src/core/models/bank_account_model.dart' as _i17;
import 'package:app_money_flow/src/core/models/login_model.dart' as _i20;
import 'package:app_money_flow/src/core/models/questions_model.dart' as _i8;
import 'package:app_money_flow/src/core/models/register_model.dart' as _i21;
import 'package:app_money_flow/src/core/models/transactions/transaction_by_category_model.dart'
    as _i15;
import 'package:app_money_flow/src/core/models/transactions/transaction_filters_model.dart'
    as _i14;
import 'package:app_money_flow/src/core/models/transactions/transaction_model.dart'
    as _i13;
import 'package:app_money_flow/src/core/models/user_answers_model.dart' as _i6;
import 'package:app_money_flow/src/core/services/auth_service.dart' as _i19;
import 'package:app_money_flow/src/core/services/bank_accounts_service.dart'
    as _i16;
import 'package:app_money_flow/src/core/services/http/http_client.dart' as _i2;
import 'package:app_money_flow/src/core/services/message_service.dart' as _i18;
import 'package:app_money_flow/src/core/services/questions_service.dart' as _i7;
import 'package:app_money_flow/src/core/services/transactions_service.dart'
    as _i12;
import 'package:app_money_flow/src/core/services/user_answers_service.dart'
    as _i4;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpClient_0 extends _i1.SmartFake implements _i2.HttpClient {
  _FakeHttpClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserAnswersService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserAnswersService extends _i1.Mock
    implements _i4.UserAnswersService {
  MockUserAnswersService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpClient get http => (super.noSuchMethod(
        Invocation.getter(#http),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.getter(#http),
        ),
      ) as _i2.HttpClient);

  @override
  _i5.Future<dynamic> submitAnswers(List<_i6.UserAnswerModel>? answers) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitAnswers,
          [answers],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [QuestionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionsService extends _i1.Mock implements _i7.QuestionsService {
  MockQuestionsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpClient get http => (super.noSuchMethod(
        Invocation.getter(#http),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.getter(#http),
        ),
      ) as _i2.HttpClient);

  @override
  _i5.Future<List<_i8.QuestionModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i5.Future<List<_i8.QuestionModel>>.value(<_i8.QuestionModel>[]),
      ) as _i5.Future<List<_i8.QuestionModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i11.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i5.Future<_i11.Uint8List>);

  @override
  _i5.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TransactionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionService extends _i1.Mock
    implements _i12.TransactionService {
  MockTransactionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.HttpClient);

  @override
  _i5.Future<dynamic> create(_i13.TransactionModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [model],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<List<_i13.TransactionModel>> getAll(
          _i14.TransactionFiltersModel? filters) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [filters],
        ),
        returnValue: _i5.Future<List<_i13.TransactionModel>>.value(
            <_i13.TransactionModel>[]),
      ) as _i5.Future<List<_i13.TransactionModel>>);

  @override
  _i5.Future<dynamic> remove(String? transactionId) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [transactionId],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> update(_i13.TransactionModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [model],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<List<_i15.TransactionByCategoryModel>>
      getExpenseSummaryByCategory({
    required int? month,
    required int? year,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getExpenseSummaryByCategory,
              [],
              {
                #month: month,
                #year: year,
              },
            ),
            returnValue:
                _i5.Future<List<_i15.TransactionByCategoryModel>>.value(
                    <_i15.TransactionByCategoryModel>[]),
          ) as _i5.Future<List<_i15.TransactionByCategoryModel>>);
}

/// A class which mocks [BankAccountsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBankAccountsService extends _i1.Mock
    implements _i16.BankAccountsService {
  MockBankAccountsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpClient get http => (super.noSuchMethod(
        Invocation.getter(#http),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.getter(#http),
        ),
      ) as _i2.HttpClient);

  @override
  _i5.Future<List<_i17.BankAccountModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i5.Future<List<_i17.BankAccountModel>>.value(
            <_i17.BankAccountModel>[]),
      ) as _i5.Future<List<_i17.BankAccountModel>>);

  @override
  _i5.Future<dynamic> create(_i17.BankAccountModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [model],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> update(_i17.BankAccountModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [model],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<void> remove(String? bankAccountId) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [bankAccountId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [MessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageService extends _i1.Mock implements _i18.MessageService {
  MockMessageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> getMessageForCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessageForCategory,
          [category],
        ),
        returnValue: _i5.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #getMessageForCategory,
            [category],
          ),
        )),
      ) as _i5.Future<String>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i19.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.HttpClient);

  @override
  _i5.Future<String> signin(_i20.LoginModel? login) => (super.noSuchMethod(
        Invocation.method(
          #signin,
          [login],
        ),
        returnValue: _i5.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #signin,
            [login],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<String> signup(_i21.RegisterModel? register) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [register],
        ),
        returnValue: _i5.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #signup,
            [register],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i19.UserModel?> validateToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateToken,
          [token],
        ),
        returnValue: _i5.Future<_i19.UserModel?>.value(),
      ) as _i5.Future<_i19.UserModel?>);
}
